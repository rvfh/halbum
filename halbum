#!/bin/bash
#
# (c) 2006 Herve Fache
# License: GPL v2
#

PROGNAME=`basename $0`

REDUCTIONS_SIZE=320

FILE=.index

# If we receive a path as argument, work within it
# Usually /srv/http/photos
if [ -n "$1" ] && [ -d "$1" ]; then
    cd "$1"
fi
ROOT=$PWD

ALL_LANGUAGES=$ROOT/.languages

header() {
    echo "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">"
    echo "<html>"
    echo "<head>"
    echo "<meta NAME=\"Generator\" Content=\"My magic script\">"
    echo "<meta HTTP-EQUIV=\"Content-Type\" content=\"text/html; charset=utf-8\">"
    echo "<title>$1</title>"
    echo "</head>"
    echo "<body bgcolor=\"#333333\" text=\"#dddddd\" link=\"#95ddff\" vlink=\"#aaaaaa\" alink=\"#ff0000\">"
    echo ""
    echo "<table align=\"center\" bgcolor=\"#444444\" border=1 cellspacing=3 cellpadding=5><tr><td><h1 align=\"center\">$TITLE</h1></td></tr></table><p>&nbsp;</p>"
}

footer() {
    echo ""
    echo "</body>"
    echo "</html>"
}

# Check needed tools
if ! which jhead > /dev/null 2>&1; then
    echo " -> jhead mising, aborting"
    exit 1
fi

# Main loop goes through all directories in view
echo "Create albums"
ls -1t | while read dir; do
    # If it contains an originals directory, it may be of interest
    if [ -d "$dir/originals" ]; then
        cd "$dir"
        echo " -> entering $dir"

        # Check that the directory contains photographs
        if ! ls originals/*.[jJ][pP][gG] > /dev/null 2>&1; then
            echo " --> no photograph files found, skipping"
            continue
        fi
        mkdir -p reductions

        # Make sure permissions and date are correct
        echo " --> checking originals"
        for ORIGINAL in `ls -tr originals/*.[jJ][pP][gG]`; do
            IMAGE=`basename "$ORIGINAL"`
            echo " ---> checking $IMAGE"
            ORIGINAL_STAMP="originals/.$IMAGE"
            if [ ! -e "$ORIGINAL_STAMP" ]; then
                # Make sure the permissions are correct and repair file time
                if chmod 644 "$ORIGINAL" && jhead -ft "$ORIGINAL" > /dev/null; then
                    jhead -c "$ORIGINAL" | cut -d '"' -f 3 | cut -d ' ' -f 2 > "$ORIGINAL_STAMP"
                fi
            fi

            # Check reduction dimensions
            REDUCTION="reductions/$IMAGE"
            REDUCTION_STAMP="reductions/.$IMAGE"
            ORIGINAL_DIMENSIONS=`cat "$ORIGINAL_STAMP"`
            ORIGINAL_WIDTH=${ORIGINAL_DIMENSIONS/x*/}
            ORIGINAL_HEIGHT=${ORIGINAL_DIMENSIONS/*x/}
            if [ -e "$REDUCTION" ]; then
                REDUCTION_DIMENSIONS=`cat "$REDUCTION_STAMP"`
                if [[ $ORIGINAL_WIDTH > $ORIGINAL_HEIGHT ]]; then
                    # Landscape
                    REDUCTION_DIMENSION=${REDUCTION_DIMENSIONS/x*/}
                else
                    # Portrait
                    REDUCTION_DIMENSION=${REDUCTION_DIMENSIONS/*x/}
                fi
                if [ "$REDUCTION_DIMENSION" != "$REDUCTIONS_SIZE" ]; then
                    echo " ---> scheduling for re-creation"
                    unset REDUCTION_ISVALID
                else
                    REDUCTION_ISVALID="yes"
                fi
            else
                unset REDUCTION_ISVALID
            fi

            # Create reduction
            if [ -z "$REDUCTION_ISVALID" ]; then
                echo " ---> creating reduction"
                if [[ $ORIGINAL_WIDTH > $ORIGINAL_HEIGHT ]]; then
                    convert -resize $REDUCTIONS_SIZE "$ORIGINAL" .image
                else
                    convert -resize x$REDUCTIONS_SIZE "$ORIGINAL" .image
                fi
                rm -f "$REDUCTION" "$REDUCTION_STAMP"
                if jhead -c "$REDUCTION" | cut -d '"' -f 3 | cut -d ' ' -f 2 > "$REDUCTION_STAMP"; then
                    mv .image "$REDUCTION"
                fi
            fi
        done

        # Make sure we have at least one language
        if  [ ! -r languages ]; then
            echo en > languages
        fi
        LANGUAGES=`cat languages`

        # Language support
        ln -sf $ROOT/flags
        ln -sf $ROOT/index.html index.html

        # Create index
        echo " --> checking indexes"
        for LANGUAGE in $LANGUAGES; do
            echo $LANGUAGE >> $ALL_LANGUAGES
            TITLES="titles-$LANGUAGE.text"
            if [ -r $LANGUAGE/index.html -a $TITLES -ot $LANGUAGE/index.html ]; then
                continue
            fi

            echo -n " ---> creating index for language $LANGUAGE"
            if [ -r $ROOT/names/$LANGUAGE.text ]; then
                echo " (`cat $ROOT/names/$LANGUAGE.text`)"
            else
                echo
            fi

            # Create photos titles file
            mkdir -p $LANGUAGE

            TITLES="titles-$LANGUAGE.text"
            if [ ! -r "$TITLES" ]; then
                touch "$TITLES"
            fi

            # Add title
            TITLE=`grep -m1 -e "^TITLE:" "$TITLES"`
            if [ -z "$TITLE" ]; then
                echo "TITLE: untitled" >> "$TITLES"
                TITLE="untitled"
            else
                TITLE=`echo $TITLE | sed "s/^TITLE: *//"`
            fi

            # Create header (and file)
            header "$TITLE" > $LANGUAGE/.index

            # Convert images
            for ORIGINAL in `ls -tr originals/*.[jJ][pP][gG]`; do
                IMAGE=`basename "$ORIGINAL"`
                REDUCTION="reductions/$IMAGE"
                echo "<table align=\"center\" border=1 cellspacing=0 cellpadding=3><tr><td align=\"center\" bgcolor=\"#444444\">" >> $LANGUAGE/.index
                echo "<a href=\"../$ORIGINAL\"><img src=\"../$REDUCTION\" alt=\"$IMAGE\" title=\"$IMAGE\"></a>" >> $LANGUAGE/.index
                IMAGE_COMMENT=`grep -m1 -e "^$IMAGE:" "$TITLES"`
                if [ -z "$IMAGE_COMMENT" ]; then
                    echo "$IMAGE: untitled" >> "$TITLES"
                    IMAGE_COMMENT="untitled"
                else
                    IMAGE_COMMENT=`echo $IMAGE_COMMENT | sed "s%^$IMAGE:%%"`
                fi
                echo "<p align=\"center\"><b>$IMAGE_COMMENT</b><br><i>(Date: `date +"%F %R %Z" -r $ORIGINAL`, Size: `du --si $ORIGINAL | cut -f 1`)</i></p>" >> $LANGUAGE/.index
                echo "</tr></td></table><p>&nbsp;</p>" >> $LANGUAGE/.index
            done

            # Add footer
            footer >> $LANGUAGE/.index

            # Put new file online
            mv $LANGUAGE/.index $LANGUAGE/index.html
        done

        touch -r "$ORIGINAL" .
        cd ..
    fi
done

# Create languages file
sort $ALL_LANGUAGES | uniq > languages
rm -f $ALL_LANGUAGES

# Now that the directory dates are set, fill in the main index file
echo "Create album indexes"
for LANGUAGE in `cat languages`; do
    mkdir -p $LANGUAGE
    echo " -> language $LANGUAGE"
    TITLE="Photos"

    header "$TITLE" > $LANGUAGE/.index

    echo "<table align=\"center\"><tr><td>" >> $LANGUAGE/.index
    ls -1tr | while read dir; do
        TITLES="$dir/titles-$LANGUAGE.text"
        if [ ! -r "$TITLES" ]; then
            # Default to English
            LANGUAGE_USED="en"
            TITLES="$dir/titles-$LANGUAGE_USED.text"
        else
            LANGUAGE_USED="$LANGUAGE"
        fi
        if [ -d "$dir/$LANGUAGE_USED" ] && [ -r "$TITLES" ] && [ -r "$dir/$LANGUAGE_USED/index.html" ]; then
            TITLE=`grep -e "^TITLE:" "$TITLES" | sed "s/^TITLE://"`
            echo -n "<h3><a href=\"../$dir/$LANGUAGE_USED\">$TITLE" >> $LANGUAGE/.index
            if [ "$LANGUAGE" != "$LANGUAGE_USED" ]; then
                echo -n " <img src=\"../flags/$LANGUAGE_USED.gif\" width=28 height=15 alt=\"[$LANGUAGE_USED]\" title=\"`cat $ROOT/names/$LANGUAGE_USED.text`\">" >> $LANGUAGE/.index
            fi
            echo "</a></h3>" >> $LANGUAGE/.index
            echo " --> linked $dir/$LANGUAGE_USED"
        fi
    done
    echo "</td></tr></table>" >> $LANGUAGE/.index
    footer >> $LANGUAGE/.index

    # Put new file online
    mv $LANGUAGE/.index $LANGUAGE/index.html
done

# Now that the directory dates are set, fill in the main index file
TITLE="Choose your language"
header "$TITLE" > $FILE
echo "<table align=\"center\"><tr><td>" >> $FILE
for LANGUAGE in `cat languages`; do
    echo "<a href=\"$LANGUAGE\"><img src=\"flags/$LANGUAGE.gif\" width=144 height=76 alt=\"`cat $ROOT/names/$LANGUAGE.text`\" title=\"`cat $ROOT/names/$LANGUAGE.text`\"></a>" >> $FILE
done
echo "</td></tr></table>" >> $FILE
echo "<p align=\"center\"><i>Generated: `date +"%F %R %Z" -r $FILE` using <a href=\"$PROGNAME\">this</a> script</i></p>" >> $FILE
footer >> $FILE

# Put new file online
mv $FILE index.html
