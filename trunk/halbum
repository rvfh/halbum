#!/bin/bash
#
# (c) 2004-2007 Herve Fache
# License: GPL v2
#

PROGNAME=`basename $0`

REDUCTIONS_SIZE=320

# If we receive a path as argument, work within it
# Usually /var/www/photos
if [ -n "$1" ] && [ -d "$1" ]; then
    cd "$1"
fi
ROOT=$PWD

EXPR_JPEG="\.[jJ][pP][eE]\?[gG]$"
EXPR_PNG="\.[pP][nN][gG]$"
EXPR_BMP="\.[bB][mM][pP]$"

tr_getfield() {
    grep -e "^$2:" $ROOT/names/$1.text | sed "s/^$2: *//"
}

tr_languagename() {
    tr_getfield "$1" "languagename"
}

tr_back() {
    tr_getfield "$1" "back"
}

tr_backtotop() {
    tr_getfield "$1" "backtotop"
}

tr_photos() {
    tr_getfield "$1" "photos"
}

tr_generated() {
    tr_getfield "$1" "generated"
}

tr_slideshow() {
    tr_getfield "$1" "slideshow"
}

header() {
    echo "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">"
    echo "<html>"
    echo "<head>"
    echo "<meta NAME=\"Generator\" Content=\"My magic script\">"
    echo "<meta HTTP-EQUIV=\"Content-Type\" content=\"text/html; charset=utf-8\">"
    echo "<title>$1</title>"
    echo "</head>"
    echo "<body bgcolor=\"#333333\" text=\"#dddddd\" link=\"#95ddff\" vlink=\"#aaaaaa\" alink=\"#ff0000\">"
    echo ""
    echo "<a name=\"top\"></a>"
    echo "<table align=\"center\" bgcolor=\"#444444\" border=1 cellspacing=3 cellpadding=5>"
    echo "<tr><td align=\"center\"><h1>$1</h1>"
    if [ -n "$3" ]; then
        echo "<a href='$2'>$3</a>"
    fi
    echo "</td></tr>"
    echo "</table><p>&nbsp;</p>"
}

footer() {
    echo ""
    echo "</body>"
    echo "</html>"
}

slideshow_header() {
    echo "<script language=\"JavaScript\">"
    echo "//By Paul Davis - www.kaosweaver.com"
    echo "var j,d=\"\",l=\"\",m=\"\",p=\"\",q=\"\",z=\"\",list= new Array()"
}

slideshow_image() {
    echo "list[list.length]='$1';"
}

slideshow_footer() {
    echo "j=parseInt(Math.random()*list.length);"
    echo "j=(isNaN(j))?0:j;"
    echo "document.write(\"<img name='seqSlideShow' src='\"+list[j]+\"' border=0 >\");"
    echo "function seqSlideShow(t,l) {"
    echo "    x=document.seqSlideShow;"
    echo "    j=l;"
    echo "    j++;"
    echo "    if (j==list.length) j=0;"
    echo "    x.src=list[j];"
    echo "    setTimeout(\"seqSlideShow(\"+t+\",\"+j+\")\",t);"
    echo "}"
    echo "</script>"

    echo "<script language=\"JavaScript\"> seqSlideShow(2000,-1); </script>"
}

image_jpeg_size() {
    if ! jhead -c "$1" | cut -d '"' -f 3 | cut -d ' ' -f 2; then
        return 1
    fi
}

image_png_size() {
    if ! file -b "$1" | cut -d , -f 2 | sed "s% %%g"; then
        return 1
    fi
}

image_bmp_size() {
    if ! file -b "$1" | cut -d , -f 3 | cut -d x -f 1-2 | sed "s% %%g"; then
        return 1
    fi
}

image_type() {
    if echo "$1" | grep -e ".$EXPR_JPEG" > /dev/null; then
        echo "JPEG"
    elif echo "$1" | grep -e ".$EXPR_PNG" > /dev/null; then
        echo "PNG"
    elif echo "$1" | grep -e ".$EXPR_BMP" > /dev/null; then
        echo "BMP"
    else
        echo ""
    fi
}

image_name() {
    local type
    if [ -z "$2" ]; then
        type=`image_type "$1"`
    else
        type="$2"
    fi
    case "$type" in
    "JPEG" )
        echo "$1" | sed "s%\(.*\)$EXPR_JPEG%\1%"
        ;;
    "PNG" )
        echo "$1" | sed "s%\(.*\)$EXPR_PNG%\1%"
        ;;
    "BMP" )
        echo "$1" | sed "s%\(.*\)$EXPR_BMP%\1%"
        ;;
    esac
}

image_size() {
    local type
    if [ -z "$2" ]; then
        type=`image_type "$1"`
    else
        type="$2"
    fi
    case "$type" in
    "JPEG" )
        if ! image_jpeg_size "$1";  then
            return 1
        fi
        ;;
    "PNG" )
        if ! image_png_size "$1"; then
            return 1
        fi
        ;;
    "BMP" )
        if ! image_bmp_size "$1"; then
            return 1
        fi
        ;;
    esac
}

# Check needed tools
if ! which jhead > /dev/null 2>&1; then
    echo " -> jhead mising, aborting"
    exit 1
fi

TMP_LANGUAGES=$ROOT/.languages

# Main loop goes through all directories in view
echo "Create albums"
ls -1t | while read dir; do
    # If it contains an originals directory, it may be of interest
    if [ -d "$dir/originals" ]; then
        cd "$dir"
        echo " -> entering $dir"

        # Check that the directory contains photographs
        if ! ls originals/*.[jJ][pP][gG] > /dev/null 2>&1; then
            echo " --> no supported photograph files found, skipping"
            continue
        fi
        mkdir -p reductions
        rm -f reductions/.list

        # Make sure permissions and date are correct
        echo " --> checking originals"
        ls -tr originals/*.[jJ][pP][gG] | while read ORIGINAL; do
            ORIGINAL_NAME=`basename "$ORIGINAL"`
            echo " ---> original: $ORIGINAL_NAME"

            ORIGINAL_STAMP="originals/.$ORIGINAL_NAME"
            if [ ! -e "$ORIGINAL_STAMP" -o ! -s "$ORIGINAL_STAMP" ]; then
                # Make sure the permissions are correct and repair file time
                if chmod 644 "$ORIGINAL" && jhead -ft "$ORIGINAL" > /dev/null; then
                    echo " ----> creating original size cache"
                    image_size "$ORIGINAL" > "$ORIGINAL_STAMP"
                else
                    echo " ----> missing access rights to image, skipping"
                    continue
                fi
            fi
        done

        echo " --> checking reductions"
        ls -tr originals/*.[jJ][pP][gG] | while read ORIGINAL; do
            ORIGINAL_NAME=`basename "$ORIGINAL"`
            IMAGE_NAME=`image_name "$ORIGINAL_NAME"`

            # This determines the reduction image format
            REDUCTION_EXT="jpg"

            # Check reduction dimensions
            REDUCTION_NAME="$IMAGE_NAME.$REDUCTION_EXT"
            echo " ---> reduction: $REDUCTION_NAME"
            REDUCTION="reductions/$REDUCTION_NAME"
            REDUCTION_STAMP="reductions/.$REDUCTION_NAME"
            if [ -e "$REDUCTION" ]; then
                REDUCTION_TYPE=`image_type "$REDUCTION"`
                if [ ! -e "$REDUCTION_STAMP" -o ! -s "$REDUCTION_STAMP" ]; then
                    echo " ----> creating reduction size cache"
                    image_size "$REDUCTION" "$REDUCTION_TYPE" > "$REDUCTION_STAMP"
                fi
                REDUCTION_DIMENSIONS=`cat "$REDUCTION_STAMP"`
                REDUCTION_WIDTH=${REDUCTION_DIMENSIONS/x*/}
                REDUCTION_HEIGHT=${REDUCTION_DIMENSIONS/*x/}
                if [[ $REDUCTION_WIDTH > $REDUCTION_HEIGHT ]]; then
                    # Landscape
                    REDUCTION_DIMENSION=${REDUCTION_DIMENSIONS/x*/}
                else
                    # Portrait
                    REDUCTION_DIMENSION=${REDUCTION_DIMENSIONS/*x/}
                fi
                if [ "$REDUCTION_DIMENSION" != "$REDUCTIONS_SIZE" ]; then
                    echo " ----> size mismatch"
                    unset REDUCTION_ISVALID
                else
                    REDUCTION_ISVALID="yes"
                fi
            else
                unset REDUCTION_ISVALID
            fi

            # Create reduction
            if [ -z "$REDUCTION_ISVALID" ]; then
                echo " ----> creating reduction"
                ORIGINAL_STAMP="originals/.$ORIGINAL_NAME"
                ORIGINAL_DIMENSIONS=`cat "$ORIGINAL_STAMP"`
                ORIGINAL_WIDTH=${ORIGINAL_DIMENSIONS/x*/}
                ORIGINAL_HEIGHT=${ORIGINAL_DIMENSIONS/*x/}
                if [[ $ORIGINAL_WIDTH > $ORIGINAL_HEIGHT ]]; then
                    RESIZE_OPTION=$REDUCTIONS_SIZE
                else
                    RESIZE_OPTION=x$REDUCTIONS_SIZE
                fi
                TMP_IMAGE="reductions/.image.$REDUCTION_EXT"
                if ! convert -resize $RESIZE_OPTION "$ORIGINAL" "$TMP_IMAGE"; then
                    continue
                fi
                rm -f "$REDUCTION" "$REDUCTION_STAMP"
                mv "$TMP_IMAGE" "$REDUCTION"
                image_size "$REDUCTION" "$REDUCTION_TYPE" > "$REDUCTION_STAMP"
            fi
            ORIGINAL_EXT=`echo "$ORIGINAL_NAME" | sed "s%^$IMAGE_NAME\.%%"`
            echo "$ORIGINAL_EXT $REDUCTION" >> reductions/.list
        done

        if ! diff -q reductions/.list reductions/list > /dev/null; then
            mv reductions/.list reductions/list
        else
            rm -f reductions/.list
        fi

        # Make sure we have at least one language
        if  [ ! -r languages ]; then
            echo en > languages
        fi
        LANGUAGES=`cat languages`

        # Language support
        ln -sf $ROOT/flags
        ln -sf $ROOT/index.html index.html

        # Create index
        echo " --> checking indexes"
        for LANGUAGE in $LANGUAGES; do
            echo $LANGUAGE >> $TMP_LANGUAGES
            TITLES="titles-$LANGUAGE.text"
            if [ -r $LANGUAGE/index.html -a $TITLES -ot $LANGUAGE/index.html -a reductions/list -ot $LANGUAGE/index.html ]; then
                continue
            fi

            echo -n " ---> creating index for language $LANGUAGE"
            LANGUAGE_NAME=`tr_languagename "$LANGUAGE"`
            if [ -n "$LANGUAGE_NAME" ]; then
                echo " ($LANGUAGE_NAME)"
            else
                echo
            fi

            # Create photos titles file
            mkdir -p $LANGUAGE

            TITLES="titles-$LANGUAGE.text"
            if [ ! -r "$TITLES" ]; then
                touch "$TITLES"
            fi

            # Add title
            TITLE=`grep -m1 -e "^TITLE:" "$TITLES"`
            if [ -z "$TITLE" ]; then
                echo "TITLE: untitled" >> "$TITLES"
                TITLE="untitled"
            else
                TITLE=`echo $TITLE | sed "s/^TITLE: *//"`
            fi

            # Create header (and file)
            header "$TITLE" "../../$LANGUAGE" "`tr_back "$LANGUAGE"`" > $LANGUAGE/.index

            # Links to other languages
            echo "<table align=\"center\"><tr><td align=\"center\" bgcolor=\"#444444\">" >> $LANGUAGE/.index
            for OTHER_LANGUAGE in $LANGUAGES; do
                if [ "$OTHER_LANGUAGE" != "$LANGUAGE" ]; then
                    OTHER_LANGUAGE_NAME=`tr_languagename "$OTHER_LANGUAGE"`
                    echo "<a href=\"../$OTHER_LANGUAGE\"><img src=\"../flags/$OTHER_LANGUAGE.gif\" width=28 height=15 alt=\"[$OTHER_LANGUAGE]\" title=\"$OTHER_LANGUAGE_NAME\"></a>" >> $LANGUAGE/.index
                fi
            done
            echo "</tr></td></table><p>&nbsp;</p>" >> $LANGUAGE/.index

            # Slideshow
            echo "<table align=\"center\" border=1 cellspacing=0 cellpadding=3>" >> $LANGUAGE/.index
            echo "<tr><td align=\"center\" bgcolor=\"#444444\"><b>`tr_slideshow "$LANGUAGE"`</b></tr></td>" >> $LANGUAGE/.index
            echo "<tr><td align=\"center\" bgcolor=\"#444444\" height=`expr $REDUCTIONS_SIZE + 10` width=`expr $REDUCTIONS_SIZE + 10`>" >> $LANGUAGE/.index
            slideshow_header >> $LANGUAGE/.index
            while read ORIGINAL_EXT REDUCTION; do
                slideshow_image "../$REDUCTION" >> $LANGUAGE/.index
            done < reductions/list
            slideshow_footer >> $LANGUAGE/.index
            echo "</tr></td></table><p>&nbsp;</p>" >> $LANGUAGE/.index

            # Album
            while read ORIGINAL_EXT REDUCTION; do
                REDUCTION_NAME=`basename "$REDUCTION"`
                IMAGE_NAME=`image_name "$REDUCTION_NAME"`
                ORIGINAL_NAME="$IMAGE_NAME.$ORIGINAL_EXT"
                ORIGINAL="originals/$ORIGINAL_NAME"
                IMAGE_SIZE=`du --si "$ORIGINAL" | cut -f 1`
                IMAGE_DATE=`date +"%F %R %Z" -r "$ORIGINAL"`
                echo "<table align=\"center\" border=1 cellspacing=0 cellpadding=3><tr><td align=\"center\" bgcolor=\"#444444\">" >> $LANGUAGE/.index
                echo "<a href=\"../$ORIGINAL\"><img src=\"../$REDUCTION\" alt=\"$REDUCTION_NAME\" title=\"$REDUCTION_NAME\"></a>" >> $LANGUAGE/.index
                IMAGE_COMMENT=`grep -m1 -e "^$ORIGINAL_NAME:" "$TITLES"`
                if [ -z "$IMAGE_COMMENT" ]; then
                    echo "$ORIGINAL_NAME: untitled" >> "$TITLES"
                    IMAGE_COMMENT="untitled"
                else
                    IMAGE_COMMENT=`echo $IMAGE_COMMENT | sed "s%^$ORIGINAL_NAME:%%"`
                fi
                BACKTOTOP=`tr_backtotop $LANGUAGE`
                echo "<p align=\"center\"><b>$IMAGE_COMMENT</b><br><i>(Date: $IMAGE_DATE, Size: $IMAGE_SIZE)</i><br><a href=\"#top\">$BACKTOTOP</a></p>" >> $LANGUAGE/.index
                echo "</tr></td></table><p>&nbsp;</p>" >> $LANGUAGE/.index
            done < reductions/list

            # Add footer
            footer >> $LANGUAGE/.index

            # Put new files online
            mv $LANGUAGE/.index $LANGUAGE/index.html
        done

	ORIGINAL=`ls -1tr originals/*.[jJ][pP][gG] | tail -1`
        touch -r "$ORIGINAL" .
        cd ..
    fi
done

# Create languages file
sort $TMP_LANGUAGES | uniq > languages
rm -f $TMP_LANGUAGES

# Now that the directory dates are set, fill in the main index file
echo "Create top indexes"
LANGUAGES=`cat languages`
for LANGUAGE in $LANGUAGES; do
    mkdir -p $LANGUAGE
    echo -n " -> creating index for language $LANGUAGE"
    LANGUAGE_NAME=`tr_languagename "$LANGUAGE"`
    if [ -n "$LANGUAGE_NAME" ]; then
        echo " ($LANGUAGE_NAME)"
    else
        echo
    fi


    header "`tr_photos "$LANGUAGE"`" ".." "`tr_back "$LANGUAGE"`" > $LANGUAGE/.index

    # Re-offer language selection
    echo "<table align=\"center\"><tr><td align=\"center\" bgcolor=\"#444444\">" >> $LANGUAGE/.index
    for OTHER_LANGUAGE in $LANGUAGES; do
        if [ "$OTHER_LANGUAGE" != "$LANGUAGE" ]; then
            OTHER_LANGUAGE_NAME=`tr_languagename "$OTHER_LANGUAGE"`
            echo "<a href=\"../$OTHER_LANGUAGE\"><img src=\"../flags/$OTHER_LANGUAGE.gif\" width=28 height=15 alt=\"[$OTHER_LANGUAGE]\" title=\"$OTHER_LANGUAGE_NAME\"></a>" >> $LANGUAGE/.index
        fi
    done
    echo "</tr></td></table><p>&nbsp;</p>" >> $LANGUAGE/.index

    echo "<table align=\"center\"><tr><td>" >> $LANGUAGE/.index
    ls -1tr | while read dir; do
        if [ ! -r "$dir/languages" ]; then
            continue
        fi
        TITLES="$dir/titles-$LANGUAGE.text"
        if [ ! -r "$TITLES" ]; then
            # Default to English
            USED_LANGUAGE=`head -1 "$dir/languages"`
            TITLES="$dir/titles-$USED_LANGUAGE.text"
        else
            USED_LANGUAGE="$LANGUAGE"
        fi
        if [ -d "$dir/$USED_LANGUAGE" ] && [ -r "$TITLES" ] && [ -r "$dir/$USED_LANGUAGE/index.html" ]; then
            echo " --> linking $dir/$USED_LANGUAGE"
            TITLE=`grep -e "^TITLE:" "$TITLES" | sed "s/^TITLE://"`
            echo "<h3>" >> $LANGUAGE/.index
            # Add flag if wrong language
            if [ "$LANGUAGE" != "$USED_LANGUAGE" ]; then
                USED_LANGUAGE_NAME=`tr_languagename "$USED_LANGUAGE"`
                echo " <img src=\"../flags/$USED_LANGUAGE.gif\" width=28 height=15 alt=\"[$USED_LANGUAGE]\" title=\"$USED_LANGUAGE_NAME\">" >> $LANGUAGE/.index
            fi
            echo "<a href=\"../$dir/$USED_LANGUAGE\">$TITLE</a>" >> $LANGUAGE/.index
            # Add flags for other languages
            for OTHER_LANGUAGE in `cat "$dir/languages"`; do
                if [ "$OTHER_LANGUAGE" != "$USED_LANGUAGE" ]; then
                    echo " ---> adding link to: $OTHER_LANGUAGE"
                    OTHER_LANGUAGE_NAME=`tr_languagename "$OTHER_LANGUAGE"`
                    echo " <a href=\"../$dir/$OTHER_LANGUAGE\"><img src=\"../flags/$OTHER_LANGUAGE.gif\" width=28 height=15 alt=\"[$OTHER_LANGUAGE]\" title=\"$OTHER_LANGUAGE_NAME\"></a>" >> $LANGUAGE/.index
                fi
            done
            echo "</h3>" >> $LANGUAGE/.index
        fi
    done
    echo "</td></tr></table>" >> $LANGUAGE/.index
    LINE=`tr_generated "$LANGUAGE"`
    echo "<p align=\"center\"><i>`echo $LINE | cut -d ' ' -f 1`: `date +"%F %R %Z" -r $LANGUAGE/.index` `echo $LINE | cut -d ' ' -f 2` <a href=\"$PROGNAME\">`echo $LINE | cut -d ' ' -f 3`</a> `echo $LINE | cut -d ' ' -f 4`</i></p>" >> $LANGUAGE/.index
    footer >> $LANGUAGE/.index

    # Put new file online
    mv $LANGUAGE/.index $LANGUAGE/index.html
done

# Now that the directory dates are set, fill in the main index file

header "&€^-!/%¥=*£+\$?" ".." "<---" > .index
echo "<table align=\"center\">" >> .index
# Flags
echo "<tr>" >> .index
for LANGUAGE in `cat languages`; do
    LANGUAGE_NAME=`tr_languagename "$LANGUAGE"`
    echo "<td align=\"center\"><a href=\"$LANGUAGE\"><img src=\"flags/$LANGUAGE.gif\" width=144 height=76 alt=\"$LANGUAGE_NAME\" title=\"$LANGUAGE_NAME\"></a></td>" >> .index
done
echo "</tr>" >> .index
# Names
echo "<tr>" >> .index
for LANGUAGE in `cat languages`; do
    LANGUAGE_NAME=`tr_languagename "$LANGUAGE"`
    echo "<td align=\"center\"><a href=\"$LANGUAGE\">$LANGUAGE_NAME</a></td>" >> .index
done
echo "</tr>" >> .index
echo "</table>" >> .index
footer >> .index

# Put new file online
mv .index index.html
