#!/bin/bash
#
# (c) 2006 Herve Fache
# License: GPL v2
#

PROGNAME=`basename $0`

MAX_DIMENSION=320

FILE=.index

# If we receive a path as argument, work within it
# Usually /srv/http/photos
if [ -n "$1" ] && [ -d "$1" ]; then
    cd "$1"
fi
ROOT=$PWD

ALL_LANGUAGES=$ROOT/.languages

header() {
    echo "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">"
    echo "<html>"
    echo "<head>"
    echo "<meta NAME=\"Generator\" Content=\"My magic script\">"
    echo "<meta HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; CHARSET=utf-8\">"
    echo "<TITLE>$1</TITLE>"
    echo "</head>"
    echo "<body bgcolor=\"#333333\" text=\"#dddddd\" link=\"#95ddff\" vlink=\"#aaaaaa\" alink=\"#ff0000\">"
    echo ""
    echo "<table align=\"center\" bgcolor=\"#444444\" border=1 cellspacing=3 cellpadding=5><tr><td><h1 align=\"center\">$TITLE</h1></td></tr></table><p>&nbsp;</p>"
}

footer() {
    echo ""
    echo "</body>"
    echo "</html>"
}

# Check needed tools
if ! which jhead > /dev/null 2>&1; then
    echo " -> jhead mising, aborting"
    exit 1
fi

# Main loop goes through all directories in view
echo "Create albums"
ls -1t | while read dir; do
    # If it contains a HiQ directory, it may be of interest
    if [ -d "$dir" ] && [ -d "$dir/HiQ" ]; then
        cd "$dir"
        echo " -> entering $dir"

        # Check that the directory contains photographs
        if ! ls HiQ/*.[jJ][pP][gG] > /dev/null 2>&1; then
            echo " --> no photograph files found, skipping"
            continue
        fi

        # Make sure permissions and date are correct
        cd HiQ
        for HIMAGE in `ls -tr *.[jJ][pP][gG]`; do
            STAMP=".$HIMAGE"
            if [ ! -e "$STAMP" ]; then
                # Make sure the permissions are correct and repair file time
                if chmod 644 "$HIMAGE" && jhead -ft "$HIMAGE" > /dev/null; then
                    touch "$STAMP"
                fi
            fi
        done
        cd ..

        # Make sure we have at least one language
        if  [ ! -r languages ]; then
            echo en > languages
        fi
        LANGUAGES=`cat languages`

        # Language support
        ln -sf $ROOT/flags
        ln -sf $ROOT/index.html index.html

        # Create index
        for LANGUAGE in $LANGUAGES; do
            echo -n " --> creating index for language $LANGUAGE"
            if [ -r $ROOT/names/$LANGUAGE.text ]; then
                echo " (`cat $ROOT/names/$LANGUAGE.text`)"
            else
                echo
            fi
            echo $LANGUAGE >> $ALL_LANGUAGES

            # Create photos titles file
            mkdir -p $LANGUAGE
            if [ ! -r "$LANGUAGE/titles.text" ]; then
                touch "$LANGUAGE/titles.text"
            fi

            # Add title
            TITLE=`grep -e "^TITLE:" "$LANGUAGE/titles.text"`
            if [ -z "$TITLE" ]; then
                echo "TITLE: untitled" >> "$LANGUAGE/titles.text"
                TITLE="untitled"
            else
                TITLE=`echo $TITLE | sed "s/^TITLE: *//"`
            fi

            # Create header (and file)
            header "$TITLE" > $LANGUAGE/.index
        done

        # Convert images
        for HIMAGE in `ls -tr HiQ/*.[jJ][pP][gG]`; do
            LIMAGE=`basename "$HIMAGE"`
            # Check reduction dimensions
            HIMAGE_DIMENSIONS=`jhead -c "$HIMAGE" | cut -d '"' -f 3`
            HIMAGE_DIMENSIONS=${HIMAGE_DIMENSIONS:1}
            HIMAGE_DIMENSIONS=${HIMAGE_DIMENSIONS/ */}
            HIMAGE_WIDTH=${HIMAGE_DIMENSIONS/x*/}
            HIMAGE_HEIGHT=${HIMAGE_DIMENSIONS/*x/}
            echo -n " --> checking $LIMAGE: "$HIMAGE_WIDTH"x"$HIMAGE_HEIGHT
            if [[ $HIMAGE_WIDTH > $HIMAGE_HEIGHT ]]; then
                echo " landscape"
            else
                echo " portrait"
            fi
            if [ -e "$LIMAGE" ]; then
                LIMAGE_DIMENSIONS=`jhead -c "$LIMAGE" | cut -d '"' -f 3`
                LIMAGE_DIMENSIONS=${LIMAGE_DIMENSIONS:1}
                LIMAGE_DIMENSIONS=${LIMAGE_DIMENSIONS/ */}
                if [[ $HIMAGE_WIDTH > $HIMAGE_HEIGHT ]]; then
                    # Landscape
                    LIMAGE_DIMENSION=${LIMAGE_DIMENSIONS/x*/}
                else
                    # Portrait
                    LIMAGE_DIMENSION=${LIMAGE_DIMENSIONS/*x/}
                fi
                if [ "$LIMAGE_DIMENSION" != "$MAX_DIMENSION" ]; then
                    echo " ---> scheduling for re-creation"
                    unset LIMAGE_ISVALID
                else
                    LIMAGE_ISVALID="yes"
                fi
            else
                unset LIMAGE_ISVALID
            fi

            # Create reduction
            if [ -z "$LIMAGE_ISVALID" ]; then
                echo " ---> creating thumbnail"
                if [[ $HIMAGE_WIDTH > $HIMAGE_HEIGHT ]]; then
                    convert -resize $MAX_DIMENSION "$HIMAGE" .image
                else
                    convert -resize x$MAX_DIMENSION "$HIMAGE" .image
                fi
                rm -f "$LIMAGE"
                mv .image "$LIMAGE"
                echo " ---> thumbnail: "`jhead -c "$LIMAGE" | cut -d '"' -f 3 | cut -d ' ' -f 2`
            fi

            for LANGUAGE in $LANGUAGES; do
                # Add new images to list
                echo "<table align=\"center\" border=1 cellspacing=0 cellpadding=3><tr><td align=\"center\" bgcolor=\"#444444\">" >> $LANGUAGE/.index
                echo "<a href=\"$HIMAGE\"><img src=\"../$LIMAGE\" alt=\"$HIMAGE\" title=\"$LIMAGE\"></a>" >> $LANGUAGE/.index
                IMAGE_NAME=`grep -e "^$LIMAGE:" "$LANGUAGE/titles.text"`
                if [ -z "$IMAGE_NAME" ]; then
                    echo "$LIMAGE: untitled" >> "$LANGUAGE/titles.text"
                    IMAGE_NAME="untitled"
                else
                    IMAGE_NAME=`echo $IMAGE_NAME | sed "s%^$LIMAGE:%%"`
                fi
                echo "<p align=\"center\"><b>$IMAGE_NAME</b><br><i>(Date: `date +"%F %R %Z" -r $HIMAGE`, Size: `du --si $HIMAGE | cut -f 1`)</i></p>" >> $LANGUAGE/.index
                echo "</tr></td></table><p>&nbsp;</p>" >> $LANGUAGE/.index
            done
        done

        for LANGUAGE in $LANGUAGES; do
            # Add footer
            footer >> $LANGUAGE/.index
            # Put new file online
            mv $LANGUAGE/.index $LANGUAGE/index.html
        done

        touch -r "$HIMAGE" .
        cd ..
    fi
done

# Create languages file
sort $ALL_LANGUAGES | uniq > languages
rm -f $ALL_LANGUAGES

# Now that the directory dates are set, fill in the main index file
echo "Create album indexes"
for LANGUAGE in `cat languages`; do
    mkdir -p $LANGUAGE
    cd $LANGUAGE
    echo " -> language $LANGUAGE"
    TITLE="Photos"

    header "$TITLE" > $FILE

    echo "<table align=\"center\"><tr><td>" >> $FILE
    ls -tr .. | while read dir; do
        image_dir="../$dir"
        lang_dir="../$dir/$LANGUAGE"
        if [ ! -d "$lang_dir" ]; then
            # Default to English
            lang_dir="../$dir/en"
        fi
        if [ -d "$lang_dir" ] && [ -r "$lang_dir/titles.text" ] && [ -r "$lang_dir/index.html" ]; then
            TITLE=`grep -e "^TITLE:" "$lang_dir/titles.text" | sed "s/^TITLE://"`
#            echo "<H3><a href=\"$lang_dir\">$TITLE</A> (`ls -l "$image_dir"/*.[jJ][pP][gG] | grep -c "/"` photos, `du -h --max-depth=0 -S "$lang_dir" | cut -f 1`)</H3>" >> $FILE
            echo "<h3><a href=\"$lang_dir\">$TITLE</a></h3>" >> $FILE
            echo " --> linked $lang_dir"
        fi
    done
    echo "</td></tr></table>" >> $FILE
    footer >> $FILE

    # Put new file online
    mv $FILE index.html

    cd ..
done

# Now that the directory dates are set, fill in the main index file
TITLE="Choose your language"
header "$TITLE" > $FILE
echo "<table align=\"center\"><tr><td>" >> $FILE
for LANGUAGE in `cat languages`; do
    echo "<a href=\"$LANGUAGE\"><img src=\"flags/$LANGUAGE.gif\" width=144 height=76 alt=\"`cat $ROOT/names/$LANGUAGE.text`\" title=\"`cat $ROOT/names/$LANGUAGE.text`\"></a>" >> $FILE
done
echo "</td></tr></table>" >> $FILE
echo "<p align=\"center\"><i>Generated: `date +"%F %R %Z" -r $FILE` using <a href=\"$PROGNAME\">this</a> script</i></p>" >> $FILE
footer >> $FILE

# Put new file online
mv $FILE index.html
